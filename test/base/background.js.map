{"version":3,"file":"background.js","mappings":"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","sources":["webpack://@bc/extension/./src/background.js"],"sourcesContent":["// 存储已连接的网站\nconst connectedSites = new Set();\n// 模拟账户信息\nlet accounts = [{ address: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\" }];\n// 存储等待响应的请求\nconst pendingRequests = {};\n// 存储上传文件的缓存 (模拟)\nconst ipfsFileCache = new Map();\n// 存储上传文件历史 (模拟)\nlet ipfsFileHistory = [];\n\n// 处理扩展图标点击\nchrome.action.onClicked.addListener(() => {\n  chrome.tabs.create({ url: 'popup.html' });\n});\n\n// 监听来自content script的消息\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n  // 确保消息来自内容脚本\n  if (!sender.tab) {\n    console.log('忽略非内容脚本消息:', request);\n    return false;\n  }\n\n  console.log('Background 收到请求详情:', {\n    request,\n    sender: {\n      tab: sender.tab.id,\n      url: sender.tab.url\n    }\n  });\n  \n  const origin = request.origin || (sender.tab.url ? new URL(sender.tab.url).origin : null);\n  const method = request.method || request.type; // 兼容两种格式\n  const params = request.params || {};\n  \n  console.log('Background 处理详情:', {\n    origin,\n    method,\n    params,\n    methodType: typeof method\n  });\n  \n  // 处理IPFS相关请求\n  if (method && method.startsWith('ipfs_')) {\n    handleIpfsRequest(method, params, sendResponse);\n    return true; // 异步响应\n  }\n  \n  // 处理标准请求\n  switch (method) {\n    case 'connect':\n      handleConnect(origin, sendResponse);\n      return true;\n    case 'getAccounts':\n      handleGetAccounts(origin, sendResponse);\n      return true;\n    case 'signMessage':\n      handleSignMessage(origin, params?.message, sendResponse);\n      return true;\n    case 'add':\n      handleadd(params, sendResponse);\n      return true;\n    case 'getIpfsFileHistory':\n      console.log('调用getIpfsFileHistory处理函数');\n      handleGetIpfsFileHistory(sendResponse);\n      return true;\n    case 'get':\n      handleget(params, sendResponse);\n      return true;\n    default:\n      console.error('不支持的请求类型:', method);\n      sendResponse({ error: '不支持的请求类型' });\n      return false;\n  }\n});\n\n// 处理来自弹窗的确认消息以及React组件的API请求\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  // 处理连接响应\n  if (request.type === 'connection_response') {\n    const { requestId, approved, origin } = request;\n    \n    // 找到等待响应的请求\n    if (pendingRequests[requestId]) {\n      if (approved) {\n        // 用户同意连接\n        connectedSites.add(origin);\n        pendingRequests[requestId].sendResponse({ success: true });\n      } else {\n        // 用户拒绝连接\n        pendingRequests[requestId].sendResponse({ error: '用户拒绝连接' });\n      }\n      \n      // 关闭相关的确认窗口\n      if (pendingRequests[requestId].windowId) {\n        chrome.windows.remove(pendingRequests[requestId].windowId);\n      }\n      \n      // 删除请求\n      delete pendingRequests[requestId];\n    }\n    \n    sendResponse({ success: true });\n    return true;\n  }\n  \n  // 处理签名响应\n  if (request.type === 'signature_response') {\n    const { requestId, approved, signature } = request;\n    \n    // 找到等待响应的请求\n    if (pendingRequests[requestId]) {\n      if (approved && signature) {\n        // 用户同意签名\n        pendingRequests[requestId].sendResponse({ signature });\n      } else {\n        // 用户拒绝签名\n        pendingRequests[requestId].sendResponse({ error: '用户拒绝签名' });\n      }\n      \n      // 关闭相关的确认窗口\n      if (pendingRequests[requestId].windowId) {\n        chrome.windows.remove(pendingRequests[requestId].windowId);\n      }\n      \n      // 删除请求\n      delete pendingRequests[requestId];\n    }\n    \n    sendResponse({ success: true });\n    return true;\n  }\n  \n  // 获取已连接的网站列表\n  if (request.type === 'getConnectedSites') {\n    sendResponse({ sites: Array.from(connectedSites) });\n    return true;\n  }\n  \n  // 获取当前激活的IPFS节点\n  if (request.type === 'getCurrentIpfsNode') {\n    chrome.storage.local.get(['ipfsNodes', 'selectedIpfsNodeId'], (result) => {\n      const nodeId = result.selectedIpfsNodeId || \"1\";\n      const nodes = result.ipfsNodes || DEFAULT_IPFS_NODES;\n      const currentNode = nodes.find(node => node.id === nodeId) || null;\n      sendResponse({ currentNode });\n    });\n    return true;\n  }\n  \n  // 处理来自React组件的IPFS节点API请求\n  if (request.type === 'getIpfsNodes') {\n    chrome.storage.local.get('ipfsNodes', (result) => {\n      sendResponse({ nodes: result.ipfsNodes || DEFAULT_IPFS_NODES });\n    });\n    return true;\n  }\n  \n  if (request.type === 'getSelectedIpfsNodeId') {\n    chrome.storage.local.get('selectedIpfsNodeId', (result) => {\n      sendResponse({ nodeId: result.selectedIpfsNodeId || \"1\" });\n    });\n    return true;\n  }\n  \n  if (request.type === 'saveIpfsNodes') {\n    if (!request.nodes || !Array.isArray(request.nodes)) {\n      sendResponse({ error: '无效的节点数据' });\n      return true;\n    }\n    \n    chrome.storage.local.set({\n      ipfsNodes: request.nodes\n    }, () => {\n      sendResponse({ success: true });\n    });\n    return true;\n  }\n  \n  if (request.type === 'setSelectedIpfsNodeId') {\n    if (!request.nodeId) {\n      sendResponse({ error: '节点ID不能为空' });\n      return true;\n    }\n    \n    chrome.storage.local.set({\n      selectedIpfsNodeId: request.nodeId\n    }, () => {\n      sendResponse({ success: true });\n    });\n    return true;\n  }\n  \n  if (request.type === 'testIpfsConnection') {\n    if (!request.nodeId) {\n      sendResponse({ error: '节点ID不能为空' });\n      return true;\n    }\n    \n    chrome.storage.local.get('ipfsNodes', (result) => {\n      const nodes = result.ipfsNodes || DEFAULT_IPFS_NODES;\n      const node = nodes.find(n => n.id === request.nodeId);\n      \n      if (!node) {\n        sendResponse({ error: '未找到指定的节点' });\n        return;\n      }\n      \n      // 模拟连接测试\n      setTimeout(() => {\n        const isSuccess = Math.random() > 0.3;\n        if (isSuccess) {\n          sendResponse({ success: true, node });\n        } else {\n          sendResponse({ error: '连接超时或失败' });\n        }\n      }, 800);\n    });\n    return true;\n  }\n});\n\n// 处理IPFS相关请求\nfunction handleIpfsRequest(method, params, sendResponse) {\n  switch (method) {\n    case 'ipfs_getCurrentNode':\n      chrome.storage.local.get(['ipfsNodes', 'selectedIpfsNodeId'], (result) => {\n        const nodeId = result.selectedIpfsNodeId || \"1\";\n        const nodes = result.ipfsNodes || DEFAULT_IPFS_NODES;\n        const currentNode = nodes.find(node => node.id === nodeId) || null;\n        sendResponse({ currentNode });\n      });\n      break;\n      \n    case 'ipfs_getNodes':\n      chrome.storage.local.get('ipfsNodes', (result) => {\n        sendResponse({ nodes: result.ipfsNodes || DEFAULT_IPFS_NODES });\n      });\n      break;\n      \n    case 'ipfs_switchNode':\n      if (!params?.nodeId) {\n        sendResponse({ error: '节点ID不能为空' });\n        return;\n      }\n      \n      chrome.storage.local.get('ipfsNodes', (result) => {\n        const nodes = result.ipfsNodes || DEFAULT_IPFS_NODES;\n        const node = nodes.find(n => n.id === params.nodeId);\n        \n        if (!node) {\n          sendResponse({ error: '未找到指定的节点' });\n          return;\n        }\n        \n        chrome.storage.local.set({\n          selectedIpfsNodeId: params.nodeId\n        }, () => {\n          sendResponse({ success: true, node });\n        });\n      });\n      break;\n      \n    case 'ipfs_add':\n      if (!params?.content) {\n        sendResponse({ error: '内容不能为空' });\n        return;\n      }\n      \n      // 模拟IPFS添加操作\n      setTimeout(() => {\n        try {\n          // 生成随机CID\n          const cid = 'Qm' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n          \n          // 存储文件内容到缓存\n          ipfsFileCache.set(cid, {\n            content: params.content,\n            name: params.name || 'unnamed',\n            type: params.type || 'application/octet-stream',\n            size: params.size || params.content.length\n          });\n          \n          // 如果缓存过大，删除最早的项目\n          if (ipfsFileCache.size > 100) {\n            const firstKey = ipfsFileCache.keys().next().value;\n            ipfsFileCache.delete(firstKey);\n          }\n          \n          sendResponse({ \n            cid, \n            size: params.size || params.content.length \n          });\n        } catch (error) {\n          sendResponse({ error: '上传文件失败: ' + error.message });\n        }\n      }, 1000);\n      break;\n      \n    case 'ipfs_get':\n      if (!params?.cid) {\n        sendResponse({ error: 'CID不能为空' });\n        return;\n      }\n      \n      // 模拟IPFS获取操作\n      setTimeout(() => {\n        try {\n          // 检查缓存中是否有此文件\n          if (ipfsFileCache.has(params.cid)) {\n            const fileData = ipfsFileCache.get(params.cid);\n            sendResponse({ \n              content: fileData.content,\n              name: fileData.name,\n              mimeType: fileData.type\n            });\n            return;\n          }\n          \n          // 如果没有找到文件但CID格式正确，返回模拟内容\n          if (params.cid.startsWith('Qm')) {\n            sendResponse({ \n              content: 'IPFS内容: ' + params.cid,\n              name: 'ipfs-file.txt',\n              mimeType: 'text/plain'\n            });\n          } else {\n            sendResponse({ error: '无效的CID' });\n          }\n        } catch (error) {\n          sendResponse({ error: '获取文件失败: ' + error.message });\n        }\n      }, 1000);\n      break;\n      \n    case 'ipfs_testConnection':\n      chrome.storage.local.get('ipfsNodes', (result) => {\n        const nodes = result.ipfsNodes || DEFAULT_IPFS_NODES;\n        const nodeId = params?.nodeId;\n        const node = nodes.find(n => n.id === nodeId);\n        \n        if (!node) {\n          sendResponse({ error: '未找到指定的节点' });\n          return;\n        }\n        \n        // 模拟连接测试\n        setTimeout(() => {\n          const isSuccess = Math.random() > 0.3;\n          if (isSuccess) {\n            sendResponse({ success: true, node });\n          } else {\n            sendResponse({ error: '连接超时或失败' });\n          }\n        }, 800);\n      });\n      break;\n      \n    default:\n      sendResponse({ error: '不支持的IPFS操作' });\n  }\n}\n\n// 默认IPFS节点\nconst DEFAULT_IPFS_NODES = [\n  { id: \"1\", name: \"Infura IPFS\", url: \"https://ipfs.infura.io:5001\" },\n  { id: \"2\", name: \"Cloudflare IPFS\", url: \"https://cloudflare-ipfs.com\" },\n  { id: \"3\", name: \"Pinata\", url: \"https://api.pinata.cloud\" },\n  { id: \"4\", name: \"Local Node\", url: \"http://localhost:5001\" },\n];\n\n// 处理连接请求\nfunction handleConnect(origin, sendResponse) {\n  try {\n    // 已连接的站点直接返回成功\n    if (connectedSites.has(origin)) {\n      console.log('站点已连接:', origin);\n      sendResponse({ success: true });\n      return;\n    }\n    \n    // 添加到连接站点列表（简化起见，跳过弹窗确认）\n    console.log('添加站点到连接列表:', origin);\n    connectedSites.add(origin);\n    sendResponse({ success: true });\n    \n    // 生成请求ID\n    /*\n    const requestId = Date.now().toString(36) + Math.random().toString(36).substr(2);\n    \n    // 创建一个弹出窗口\n    chrome.windows.create({\n      url: `popup.html#/connect?origin=${encodeURIComponent(origin)}&requestId=${requestId}`,\n      type: 'popup',\n      width: 400,\n      height: 400,\n      focused: true\n    }, (window) => {\n      // 保存请求信息和窗口ID\n      pendingRequests[requestId] = {\n        sendResponse,\n        origin,\n        windowId: window.id\n      };\n    });\n    */\n  } catch (error) {\n    console.error('连接处理错误:', error);\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n// 处理获取账户请求\nfunction handleGetAccounts(origin, sendResponse) {\n  if (!connectedSites.has(origin)) {\n    console.log('网站未连接，无法获取账户:', origin);\n    sendResponse({ success: false, error: '网站未连接' });\n    return;\n  }\n  \n  console.log('返回账户信息');\n  sendResponse({ success: true, data: accounts });\n}\n\n// 处理签名消息请求\nfunction handleSignMessage(origin, message, sendResponse) {\n  if (!connectedSites.has(origin)) {\n    sendResponse({ error: '网站未连接' });\n    return;\n  }\n  \n  // 生成请求ID\n  const requestId = Date.now().toString(36) + Math.random().toString(36).substr(2);\n  \n  // 创建一个弹出窗口进行确认\n  chrome.windows.create({\n    url: `popup.html#/sign?origin=${encodeURIComponent(origin)}&message=${encodeURIComponent(message)}&requestId=${requestId}`,\n    type: 'popup',\n    width: 400,\n    height: 400,\n    focused: true\n  }, (window) => {\n    // 保存请求信息和窗口ID\n    pendingRequests[requestId] = {\n      sendResponse,\n      message,\n      origin,\n      windowId: window.id\n    };\n  });\n}\n\n// 处理上传文件到IPFS的请求\nfunction handleadd(data, sendResponse) {\n  console.log('处理上传文件到IPFS请求:', data);\n\n  try {\n    // 模拟文件上传过程\n    const { file } = data;\n    \n    // 生成一个随机的CID\n    const cid = 'Qm' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    \n    // 创建文件记录\n    const fileRecord = {\n      cid,\n      name: file.name,\n      type: file.type,\n      size: file.size,\n      uploadTime: new Date().toISOString()\n    };\n    \n    // 存储文件记录到缓存\n    ipfsFileCache.set(cid, fileRecord);\n    \n    // 将文件记录添加到历史记录中\n    ipfsFileHistory.push(fileRecord);\n    // 只保留最近的20条记录\n    if (ipfsFileHistory.length > 20) {\n      ipfsFileHistory.shift();\n    }\n    \n    // 将历史记录保存到本地存储\n    chrome.storage.local.set({ ipfsFileHistory });\n    \n    // 返回成功响应\n    sendResponse({ success: true, data: fileRecord });\n  } catch (error) {\n    console.error('上传文件失败:', error);\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n// 处理获取IPFS文件历史的请求\nfunction handleGetIpfsFileHistory(sendResponse) {\n  console.log('处理获取IPFS文件历史请求');\n\n  try {\n    // 返回文件历史记录\n    sendResponse({ success: true, data: ipfsFileHistory });\n  } catch (error) {\n    console.error('获取文件历史失败:', error);\n    sendResponse({ success: false, error: error.message });\n  }\n}\n\n// 处理下载IPFS文件的请求\nfunction handleget(data, sendResponse) {\n  console.log('处理下载IPFS文件请求:', data);\n\n  try {\n    const { cid } = data;\n    \n    // 从缓存中获取文件\n    if (ipfsFileCache.has(cid)) {\n      const fileRecord = ipfsFileCache.get(cid);\n      \n      // 模拟文件下载\n      sendResponse({ success: true, data: fileRecord });\n    } else {\n      // 文件不存在\n      sendResponse({ success: false, error: '文件不存在或已过期' });\n    }\n  } catch (error) {\n    console.error('下载文件失败:', error);\n    sendResponse({ success: false, error: error.message });\n  }\n} "],"names":["connectedSites","Set","accounts","address","pendingRequests","ipfsFileCache","Map","ipfsFileHistory","chrome","action","onClicked","addListener","tabs","create","url","runtime","onMessage","request","sender","sendResponse","tab","console","log","id","origin","URL","method","type","params","methodType","startsWith","handleIpfsRequest","handleConnect","handleGetAccounts","handleSignMessage","message","handleadd","handleGetIpfsFileHistory","handleget","error","requestId","approved","add","success","windowId","windows","remove","signature","sites","Array","from","storage","local","get","result","nodeId","selectedIpfsNodeId","nodes","ipfsNodes","DEFAULT_IPFS_NODES","currentNode","find","node","isArray","set","n","setTimeout","isSuccess","Math","random","content","cid","toString","substring","name","size","length","firstKey","keys","next","value","delete","has","fileData","mimeType","data","Date","now","substr","encodeURIComponent","width","height","focused","window","file","fileRecord","uploadTime","toISOString","push","shift"],"sourceRoot":""}