{"version":3,"file":"injectScript.js","mappings":"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","sources":["webpack://@bc/extension/./src/injectScript.js"],"sourcesContent":["// 初始化BC扩展对象\n(function() {\n  // 生成唯一ID用于追踪请求和响应\n  function generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n  \n  // 保存待处理的请求\n  const pendingRequests = {};\n  \n  // 监听来自content script的消息\n  window.addEventListener('message', event => {\n    if (event.data.type === 'BC_EXTENSION_RESPONSE') {\n      const { id, payload, error } = event.data;\n      \n      // 找到并处理对应的promise\n      if (pendingRequests[id]) {\n        if (error) {\n          pendingRequests[id].reject(new Error(error));\n        } else {\n          pendingRequests[id].resolve(payload);\n        }\n        \n        // 移除已处理的请求\n        delete pendingRequests[id];\n      }\n    }\n  });\n  \n  // 发送请求到content script\n  function sendRequest(method, params = {}) {\n    return new Promise((resolve, reject) => {\n      const id = generateId();\n      \n      pendingRequests[id] = { resolve, reject };\n      \n      const message = {\n        type: 'BC_EXTENSION_REQUEST',\n        id,\n        payload: {\n          method,\n          params\n        }\n      };\n      \n      console.log('injectScript 发送请求:', method, params, message);\n      \n      window.postMessage(message, '*');\n    });\n  }\n  \n  // 定义BC扩展API\n  const dsweb = {\n    // 连接到扩展\n    async connect() {\n      try {\n        return await sendRequest('connect');\n      } catch (error) {\n        console.error('连接失败:', error);\n        throw error;\n      }\n    },\n    \n    // 获取账户\n    async getAccounts() {\n      return sendRequest('getAccounts');\n    },\n    \n    // 签名消息\n    async signMessage(message) {\n      return sendRequest('signMessage', { message });\n    },\n    \n    // 上传文件到IPFS\n    async add(file) {\n      try {\n        return await sendRequest('add', { \n          file: {\n            name: file.name,\n            type: file.type,\n            size: file.size,\n            content: 'mock-content-' + Math.random()\n          }\n        });\n      } catch (error) {\n        console.error('上传文件失败:', error);\n        throw error;\n      }\n    },\n    \n    // 获取IPFS文件上传历史\n    async getIpfsFileHistory() {\n      try {\n        console.log('发送getIpfsFileHistory请求');\n        const response = await sendRequest('getIpfsFileHistory', {});\n        console.log('收到getIpfsFileHistory响应:', response);\n        return response;\n      } catch (error) {\n        console.error('获取上传历史失败:', error);\n        throw error;\n      }\n    },\n    \n    // 下载IPFS文件\n    async get(cid) {\n      try {\n        return await sendRequest('get', { cid });\n      } catch (error) {\n        console.error('下载文件失败:', error);\n        throw error;\n      }\n    },\n\n    // IPFS相关API\n    ipfs: {\n      // 获取当前IPFS节点\n      async getCurrentNode() {\n        return sendRequest('ipfs_getCurrentNode');\n      },\n      \n      // 获取所有可用IPFS节点·\n      async getNodes() {\n        return sendRequest('ipfs_getNodes');\n      },\n      \n      // 切换IPFS节点\n      async switchNode(nodeId) {\n        return sendRequest('ipfs_switchNode', { nodeId });\n      },\n      \n      // 上传文件到IPFS (模拟)\n      async add(content) {\n        return sendRequest('ipfs_add', { content });\n      },\n      \n      // 从IPFS获取内容 (模拟)\n      async get(cid) {\n        return sendRequest('ipfs_get', { cid });\n      },\n      \n      // 测试IPFS节点连接\n      async testConnection(nodeId) {\n        return sendRequest('ipfs_testConnection', { nodeId });\n      }\n    }\n  };\n  \n  // 将API对象注入到window对象\n  window.dsweb = dsweb;\n})(); "],"names":["generateId","Date","now","toString","Math","random","substr","pendingRequests","window","addEventListener","event","data","type","id","payload","error","reject","Error","resolve","sendRequest","method","params","Promise","message","console","log","postMessage","dsweb","connect","getAccounts","signMessage","add","file","name","size","content","getIpfsFileHistory","response","get","cid","ipfs","getCurrentNode","getNodes","switchNode","nodeId","testConnection"],"sourceRoot":""}