{"version":3,"file":"contentScript.js","mappings":";;;;AAAA,UAAU;AACV,SAASA;IACP,IAAMC,SAASC,SAASC,aAAa,CAAC;IACtCF,OAAOG,GAAG,GAAGC,OAAOC,OAAO,CAACC,MAAM,CAAC;IACnCN,OAAOO,MAAM,GAAG;QACd,IAAI,CAACC,MAAM;IACb;IACCP,CAAAA,SAASQ,IAAI,IAAIR,SAASS,eAAe,EAAEC,WAAW,CAACX;AAC1D;AAEA,YAAY;AACZY,OAAOC,gBAAgB,CAAC,WAAW,SAACC;IAClC,eAAe;IACf,IAAIA,MAAMC,MAAM,KAAKH,QAAQ;IAE7B,IAAIE,MAAME,IAAI,CAACC,IAAI,IAAIH,MAAME,IAAI,CAACC,IAAI,KAAK,wBAAwB;QACjE,IAAMC,SAASJ,MAAME,IAAI,CAACG,OAAO,CAACD,MAAM;QACxC,IAAME,SAASN,MAAME,IAAI,CAACG,OAAO,CAACC,MAAM,IAAI,CAAC,GAAG,kBAAkB;QAClE,IAAMC,YAAYP,MAAME,IAAI,CAACM,EAAE;QAE/BC,QAAQC,GAAG,CAAC,0BAA0B;YACpCN,QAAAA;YACAE,QAAAA;YACAC,WAAAA;YACAI,YAAYX,MAAME,IAAI,CAACG,OAAO;QAChC;QAEA,yBAAyB;QACzB,IAAMO,UAAU;YACdR,QAAQA;YACRE,QAAQA;YACRE,IAAID;YACJM,QAAQf,OAAOgB,QAAQ,CAACD,MAAM;QAChC;QAEAJ,QAAQC,GAAG,CAAC,sCAAsCE;QAElDtB,OAAOC,OAAO,CAACwB,WAAW,CAACH,SAAS,SAACI;YACnC,IAAI1B,OAAOC,OAAO,CAAC0B,SAAS,EAAE;gBAC5BR,QAAQS,KAAK,CAAC,WAAW5B,OAAOC,OAAO,CAAC0B,SAAS;gBACjD,OAAO;gBACPnB,OAAOqB,WAAW,CAAC;oBACjBhB,MAAM;oBACNK,IAAID;oBACJW,OAAO5B,OAAOC,OAAO,CAAC0B,SAAS,CAACL,OAAO,IAAI;gBAC7C,GAAG;gBACH;YACF;YAEAH,QAAQC,GAAG,CAAC,0BAA0B;gBACpCH,WAAAA;gBACAS,UAAAA;gBACAE,KAAK,EAAEF,qBAAAA,+BAAAA,SAAUE,KAAK;YACxB;YAEA,oBAAoB;YACpBpB,OAAOqB,WAAW,CAAC;gBACjBhB,MAAM;gBACNK,IAAID;gBACJF,SAASW;gBACTE,KAAK,EAAEF,qBAAAA,+BAAAA,SAAUE,KAAK;YACxB,GAAG;QACL;IACF;AACF;AAEA,OAAO;AACPjC","sources":["webpack://@bc/extension/./src/contentScript.js"],"sourcesContent":["// 向页面注入脚本\nfunction injectScript() {\n  const script = document.createElement('script');\n  script.src = chrome.runtime.getURL('injectScript.js');\n  script.onload = function() {\n    this.remove();\n  };\n  (document.head || document.documentElement).appendChild(script);\n}\n\n// 监听来自页面的消息\nwindow.addEventListener('message', (event) => {\n  // 确保消息来自我们期望的源\n  if (event.source !== window) return;\n  \n  if (event.data.type && event.data.type === 'BC_EXTENSION_REQUEST') {\n    const method = event.data.payload.method;\n    const params = event.data.payload.params || {}; // 确保params始终是一个对象\n    const requestId = event.data.id;\n    \n    console.log('Content script 接收请求详情:', {\n      method,\n      params,\n      requestId,\n      rawPayload: event.data.payload\n    });\n    \n    // 所有请求都转发给background页面处理\n    const message = {\n      method: method,\n      params: params,\n      id: requestId,\n      origin: window.location.origin\n    };\n    \n    console.log('Content script 转发给background的消息详情:', message);\n    \n    chrome.runtime.sendMessage(message, (response) => {\n      if (chrome.runtime.lastError) {\n        console.error('发送消息错误:', chrome.runtime.lastError);\n        // 响应错误\n        window.postMessage({\n          type: 'BC_EXTENSION_RESPONSE',\n          id: requestId,\n          error: chrome.runtime.lastError.message || '扩展通信错误'\n        }, '*');\n        return;\n      }\n      \n      console.log('Content script 接收响应详情:', {\n        requestId,\n        response,\n        error: response?.error\n      });\n      \n      // 处理来自background的响应\n      window.postMessage({\n        type: 'BC_EXTENSION_RESPONSE',\n        id: requestId,\n        payload: response,\n        error: response?.error\n      }, '*');\n    });\n  }\n});\n\n// 执行注入\ninjectScript(); "],"names":["injectScript","script","document","createElement","src","chrome","runtime","getURL","onload","remove","head","documentElement","appendChild","window","addEventListener","event","source","data","type","method","payload","params","requestId","id","console","log","rawPayload","message","origin","location","sendMessage","response","lastError","error","postMessage"],"sourceRoot":""}